[build-system]
requires = ["setuptools>=68.0", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "neurobiomorphic-ai"
version = "0.1.0"
description = "Advanced production-grade neurobiomorphic AI system with first-principles reasoning"
authors = [
    {name = "Neurobiomorphic AI Team", email = "team@neurobiomorphic-ai.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9,<3.13"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "torch>=2.1.0,<3.0.0",
    "transformers>=4.35.0,<5.0.0",
    "numpy>=1.24.0,<2.0.0",
    "scipy>=1.11.0,<2.0.0",
    "scikit-learn>=1.3.0,<2.0.0",
    "gymnasium>=0.29.0,<1.0.0",
    "pyro-ppl>=1.8.6,<2.0.0",
    "hydra-core>=1.3.0,<2.0.0",
    "wandb>=0.16.0,<1.0.0",
    "tqdm>=4.66.0,<5.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]
profiling = [
    "line_profiler>=4.1.0",
    "memory_profiler>=0.61.0",
    "psutil>=5.9.0",
]
visualization = [
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "tensorboard>=2.15.0",
]
optimization = [
    "optuna>=3.4.0",
    "ray[tune]>=2.8.0",
]

[project.urls]
Homepage = "https://github.com/aslonv/neurobiomorphic-ai"
Repository = "https://github.com/aslonv/neurobiomorphic-ai"
Documentation = "https://github.com/aslonv/neurobiomorphic-ai#readme"
Issues = "https://github.com/aslonv/neurobiomorphic-ai/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["neurobiomorphic*"]

[tool.setuptools.package-dir]
"" = "src"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_third_party = ["torch", "transformers", "numpy", "scipy", "sklearn", "gymnasium", "wandb"]
known_first_party = ["neurobiomorphic"]

# mypy configuration
[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "gymnasium.*",
    "pyro.*",
    "wandb.*",
    "stable_baselines3.*",
    "optuna.*",
    "ray.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=neurobiomorphic",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]